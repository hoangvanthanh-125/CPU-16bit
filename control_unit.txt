library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.std_logic_arith.ALL;

ENTITY control_unit IS 
	GENERIC (
		DATA_WIDTH : INTEGER := 16; -- Data Width
		ADDR_WIDTH : INTEGER := 16 -- Address width
	);
	PORT (-- you will need to add more ports here as design grows
		nReset : IN STD_LOGIC; -- high active reset signal
-- 		start : IN STD_LOGIC; -- high active Start: enable cpu
		clk : IN STD_LOGIC; -- Clock
		IR_in : IN STD_LOGIC_VECTOR (DATA_WIDTH - 1 DOWNTO 0);
		data_in0 : IN STD_LOGIC_VECTOR (DATA_WIDTH - 1 DOWNTO 0);
        ALUz : IN STD_LOGIC;
 
		Addr_out : OUT STD_LOGIC_VECTOR (ADDR_WIDTH - 1 DOWNTO 0);
		RFs : OUT STD_LOGIC_VECTOR(1 DOWNTO 0);
		RFwa : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
		RFwe : OUT STD_LOGIC;
		OPr1a : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
		OPr1e : OUT STD_LOGIC;
		OPr2a : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
		OPr2e : OUT STD_LOGIC;
		ALUs : OUT STD_LOGIC_VECTOR(1 DOWNTO 0);
		IRld : OUT STD_LOGIC;
		PCinc : OUT STD_LOGIC;
		PCclr : OUT STD_LOGIC;
		PCld : OUT STD_LOGIC;
		Ms : OUT STD_LOGIC_VECTOR(1 DOWNTO 0);
		Mre : OUT STD_LOGIC;
		Mwe : OUT STD_LOGIC 
		-- add ports as required here
 
	); 

END control_unit;

ARCHITECTURE controller_unit_arch OF control_unit IS
	SIGNAL IR_out, PC_out : STD_LOGIC_VECTOR (15 DOWNTO 0);
	SIGNAL PC_in : STD_LOGIC_VECTOR (7 DOWNTO 0);

	COMPONENT PC IS
		PORT (
			clk : IN STD_LOGIC;
			PCclr : IN STD_LOGIC;
			PCinc : IN STD_LOGIC;
			PCld : IN STD_LOGIC;
			PC_in : IN STD_LOGIC_VECTOR (7 DOWNTO 0);
			PC_out : OUT STD_LOGIC_VECTOR (15 DOWNTO 0)
		);
	END COMPONENT;
    
	COMPONENT IR IS
		PORT (
			clk : IN STD_LOGIC;
			IR_in : IN STD_LOGIC_VECTOR (15 DOWNTO 0);
			IRld : IN STD_LOGIC;
			IR_out : OUT STD_LOGIC_VECTOR (15 DOWNTO 0)
		);
	END COMPONENT;
    
	COMPONENT controller IS

		PORT (
			reset : IN STD_LOGIC;
			clk : IN STD_LOGIC;
			ALUz : IN STD_LOGIC;
			INSTR : IN STD_LOGIC_VECTOR(15 DOWNTO 0);
			RFs : OUT STD_LOGIC_VECTOR(1 DOWNTO 0);
			RFwa : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
			RFwe : OUT STD_LOGIC;
			OPr1a : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
			OPr1e : OUT STD_LOGIC;
			OPr2a : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
			OPr2e : OUT STD_LOGIC;
			ALUs : OUT STD_LOGIC_VECTOR(1 DOWNTO 0);
			IRld : OUT STD_LOGIC;
			PCincr : OUT STD_LOGIC;
			PCclr : OUT STD_LOGIC;
			PCld : OUT STD_LOGIC;
			Ms : OUT STD_LOGIC_VECTOR(1 DOWNTO 0);
			Mre : OUT STD_LOGIC;
			Mwe : OUT STD_LOGIC
		);
	END COMPONENT;
    
	COMPONENT MUX3to1 IS
		PORT (
			data_in0, data_in1 : IN STD_LOGIC_VECTOR(15 DOWNTO 0);
			data_in2 : IN STD_LOGIC_VECTOR(15 DOWNTO 0);
			RFs : IN STD_LOGIC_VECTOR(1 DOWNTO 0);
			data_out : OUT STD_LOGIC_VECTOR(15 DOWNTO 0)
		);
	END COMPONENT;
 
 
BEGIN
	IR_RES : IR
	PORT MAP(
		clk => clk,
        IR_in => IR_in,
		IRld => IRld,
        IR_out => IR_out
	);
    
	CONTROLLER_R : controller
	PORT MAP(
		reset =>nReset,
        clk => clk, 
		ALUz => ALUz, 
		INSTR => IR_out, 
		RFs => RFs, 
		RFwa => RFwa, 
		RFwe => RFwe, 
		OPr1a => OPr1a, 
		OPr1e => OPr1e, 
		OPr2a => OPr2a, 
		OPr2e => OPr2e, 
		ALUs => ALUs, 
		IRld => IRld, 
		PCincr => PCinc, 
		PCclr => PCclr, 
		PCld => PCld, 
		Ms => Ms, 
		Mre => Mre, 
		Mwe => Mwe
	);
 
	PC_in <= IR_out(7 DOWNTO 0);
	PC_C : PC
	PORT MAP(
		clk => clk, 
		PCclr => PCclr, 
		PCinc => PCinc, 
		PCld => Pcld, 
		PC_in => PC_in, 
		PC_out => PC_out
	);
	MUX31 : MUX3to1
	PORT MAP(
		data_in0 => data_in0, 
		data_in1 => (x"00" & IR_out(7 DOWNTO 0)), 
		data_in2 => PC_out,
        RFs => MS,
		data_out => Addr_out 
	);
    END controller_unit_arch;
    

